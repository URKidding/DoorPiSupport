#ifndef APP_INCLUDED_HPP
#define APP_INCLUDED_HPP

#include <AccelStepper.h>
#include <Arduino.h>
#include <ArduinoJson.hpp>
#include "Button/Button.hpp"
#include "Delta/Blinker.hpp"
#include "Delta/PeriodicTimer.hpp"
#include "LedRing/LedRing.hpp"
#include "PIR/Pir.hpp"
#include "Rfid/Reader.hpp"



namespace dps {
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

//==============================================================================================================================================================
class App
{
  enum
  {
    // Led_DIn     = 33,
    // PIR_IO      = 39,

    // NrButtons   = 3,
    // S1_IO       = 34,
    // S2_IO       = 35,
    // S3_IO       = 32,

    Led_DIn        = 27, // 33,
    PIR_IO         = 9,  // 39,

    NrButtons      = 3,
    S1_IO          = 13,
    S2_IO          = 12,
    S3_IO          = 11,

  };

  using JsonDoc = ArduinoJson::StaticJsonDocument<512>;

//==============================================================================================================================================================
public:
//==============================================================================================================================================================
  enum
  {
    Polling_ms = 10,
  };

  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// Konstruktor.
  App();
  

  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// Polling-Funktor.
  void operator()();


  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// Rechenzeitzuteilung für die Stepper.
  /// Muss so oft/schnell wie möglich aufgerufen werden.
  inline void pollSteppers()
  {
    for (auto& s : Steppers)
    {
      s.run();
    }
  }



//==============================================================================================================================================================
private:
//==============================================================================================================================================================
  /// eingehende Nachrichten vom USART behandeln.
  void handleUsart();

  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// Überträgt den Zustand des Bewegungsmelders.
  void transmitPIR();


  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// Klingeltaster auswerten.
  void handleButtons();


  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// UID des gelesenen Tags übertragen.
  void transmitUid(MFRC522::Uid& uid);


  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// eingehende JSON-Sollwertkommandos behandeln.
  void setFromJson(JsonDoc const& doc);


  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  /// erstellt ein neues JSON-Dokument.
  /// @param action  Inhalt des action-Keys
  inline JsonDoc createDoc(char const* action)
  {
    JsonDoc doc;
    doc["action"] = action;

    return doc;
  }


  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  std::array<button::Button, NrButtons> Buttons =
  {{
    button::Button(S1_IO, "S1"),
    button::Button(S2_IO, "S2"),
    button::Button(S3_IO, "S3")
  }};



  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  std::array<AccelStepper, 2>    Steppers;
  
  pir::Pir                       PIR;
  rfid::Reader                   Reader;
  String                         InputBuffer;

  common::delta::PeriodicTimer<> RoutineTimer;
  common::delta::Blinker<>       AliveTimer;

  bool                           Enabled    = false;
  bool                           StayActive = false;

  led::LedRing                   Ring;
};


//==============================================================================================================================================================

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
} // namespace dps

#endif // APP_INCLUDED_HPP
